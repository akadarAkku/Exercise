{"version":3,"sources":["state.js","forms.js","communication.js","api.js","index.js"],"names":["Ex1","useState","text","setText","onClick","Ex2","idx","setIdx","Ex3","result","length","Ex4","Ex5","count","setCount","Ex6","fib","setFib","Ex7","Ex8","food","setFood","Ex9","click","setClick","Ex10","items","setItems","map","e","i","key","Ex11","default_list","newlist","slice","Ex12","base_list","Ex13","concat","splice","Ex14","ContactForm","setComment","name","setName","submittedText","setSubmittedText","className","onSubmit","event","preventDefault","htmlFor","id","onChange","target","value","type","aria-label","MathForm","numberA","setNumberA","numberB","setNumberB","sum","parseInt","FruitForm","fruits","setFruits","fruit","setFruit","error","index","Fruit","fruitMoji","data-testid","FruitApp","onSubmitHandler","FruitList","fruitInput","console","log","FruitAppWithBalance","Pokedex","pokemons","useEffect","pokemon","entry_number","Pokemon","InteractivePokedex","selectedPokemon","DetailedPokemon","flavor_text_entries","entry","flavor_text","InterActivePokemon","pokemon_species","onSelectHandler","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31d024b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n// Exercise 1\r\n// Since Japanese is not everyboy's forte,\r\n// Write a component that changes the text to \"Hello World\" \r\n// Note: The initial value should be what is set in the \r\n// Base component\r\n\r\nconst Ex1 = function () {\r\n    const [text, setText] = useState('Hello 世界');\r\n    return (\r\n        <div>\r\n            <p>{text}</p>\r\n            <button onClick={() => { setText('HELLO WORLD')}}>\r\n                Translation please\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 2\r\n// Now, your japanese friend is lost.. Make it so that \r\n// By clicking on the button again the original text \r\n// is displayed again\r\n\r\nconst Ex2 = function () {\r\n    const text = ['Hello 世界', 'Hello World'];\r\n    const [idx, setIdx] = useState(0);\r\n    return (\r\n        <div>\r\n            <p>{text[idx]}</p>\r\n            <button onClick={() => { \r\n               let result = (idx === 0)? 1: 0;\r\n               setIdx(result);\r\n            }}>\r\n                Translation please\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Exercise 3\r\n// If you click a third time, can you read the text?\r\n// If not, make it so that if we click on the button\r\n// it always changes the text to the other language (the text toggles)\r\n\r\nconst Ex3 = function () {\r\n    const text = ['Hello 世界', 'Hello World', 'Dag Wereld', 'Bonjour le monde', 'Hallo Welt'];\r\n    const [idx, setIdx] = useState(0);\r\n    return (\r\n        <div>\r\n            <p>{text[idx]}</p>\r\n            <button onClick={() => {\r\n                let result = idx+1;\r\n                result = (result>text.length-1)? 0: result;\r\n                setIdx(result);\r\n            }}>\r\n                Translation please\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 4\r\n// Now, update the button's text so that it indicates\r\n// which language it will translate to\r\n// If Japanese is displayed, the button must say \"Translation to english please\"\r\n// When English is diplayed, the button must say \"Translation to japanese please\"\r\n// The toggle functionality should still be there.\r\n\r\nconst Ex4 = function () {\r\n    const lang = ['english', 'japanese'];\r\n    const text = ['Hello 世界', 'Hello World'];\r\n    const [idx, setIdx] = useState(0);\r\n    return (\r\n        <div>\r\n            <p>{text[idx]}</p>\r\n            <button onClick={() => {\r\n                let result = (idx === 0)? 1: 0;\r\n                setIdx(result);\r\n            }}>\r\n                Translation to {lang[idx]} please\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// ------------------------------------\r\n\r\n// Exercise 5\r\n// Write a component that adds 1 to the p tag value on each click\r\n// The p tag should start at 0\r\n\r\nconst Ex5 = function () {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <div>\r\n            <p>{count}</p>\r\n            <button onClick={() => {\r\n                setCount(count+1);\r\n            }}>\r\n                Click me!\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 6\r\n// Write a component that displays the next value\r\n// in the fibonacci serie when we click on the button\r\n// the fibonacci serie is as follows 0,1,1,2,3,5,8,13,21,...\r\n// Got the logic?\r\n// No? too bad...\r\n\r\nconst Ex6 = function () {\r\n    const [fib, setFib] = useState( [0,1]);\r\n    return (\r\n        <div>\r\n            <p>{fib[0]}</p>\r\n            <button onClick={() => {\r\n              \r\n              fib[2]=fib[0] + fib[1];\r\n              setFib([fib[1],fib[2]])}}>\r\n                Click me!\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Exercise 7\r\n// Update the p tag to reflect how many times a button was clicked\r\n// initial value should be 0\r\n\r\nconst Ex7 = function () {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <div>\r\n            <p>{count}</p>\r\n            <button onClick={() => {\r\n                setCount(count+1);\r\n            }}>\r\n                click me\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 8\r\n// Setup\r\n// Add to button tags to the component (3 in total)\r\n// first button text value is \"fruit\"\r\n// first button text value is \"meat\"\r\n// first button text value is \"vegetables\"\r\n// Goal\r\n// Set the p tag text to: \"I like ...\" where ... is the text value of the button\r\n\r\nconst Ex8 = function () {\r\n    const [food, setFood] = useState('... choose what you like.');\r\n    return (\r\n        <div>\r\n            <p>I like {food}</p>\r\n            <button onClick={() => {\r\n                setFood('fruit') \r\n            }}>\r\n                fruit\r\n            </button>\r\n            <button onClick={() => {\r\n                setFood('meat') \r\n            }}>\r\n                meat\r\n            </button>\r\n            <button onClick={() => {\r\n                setFood('vegetables') \r\n            }}>\r\n                vegetables\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 9\r\n// Setup\r\n// Still remove one button element (keep only two)\r\n// The first button text value is \"UPPER\"\r\n// The second button text value is \"LOWER\"\r\n// initial value of the p tag is 'Last click:'\r\n// Goal\r\n// On clicking any of the buttons\r\n// the p tag value should indicate which one of the buttons was clicked last\r\n// Append it to the initial 'Last click'\r\n\r\nconst Ex9 = function () {\r\n    const [click, setClick] = useState('make first click');\r\n    return (\r\n        <div>\r\n            <p>Last click: {click}</p>\r\n            <button onClick={() => {\r\n                setClick('UPPER') \r\n            }}>\r\n                UPPER\r\n            </button>\r\n            <button onClick={() => {\r\n                setClick('LOWER') \r\n            }}>\r\n                LOWER\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n// Exercise 10\r\n// Setup (start from the Base component)\r\n// replace the p tag with an unordered list tag.\r\n// add two lists elements within the unordered list. One that has \"docker\" as value the other \"kubernetes\".\r\n// Set the text of the button element to \"Add element\"\r\n// Goal\r\n// On button click, a new list item should be appended in the unordered list. It should have as value \"containerd\"\r\n\r\nconst Ex10 = function () {\r\n    const [items, setItems] = useState(['docker', 'kubernetes']);\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {items.map((e,i) => <li key={i}>{items[i]}</li>)\r\n                   \r\n                }\r\n            </ul>\r\n            <button onClick={() => { \r\n                setItems(['docker', 'kubernetes'])}}>\r\n                Add element\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 11\r\n// Setup (start from the Base component)\r\n// replace the p tag with an unordered list tag.\r\n// Keep the unordered list empty\r\n// Set the text of the button element to \"Add element\"\r\n// Goal\r\n// On button click, a new item is added to the unordered list.\r\n// The value of the item is taken from the following list (keep the order!) :\r\n// ipsizzle\r\n// nullizzle\r\n// sapizzle\r\n// velizzle\r\n// crackalackin\r\n// maurizzle\r\n// rhoncizzle\r\n\r\nconst Ex11 = function () {\r\n    const default_list = ['ipsizzle', 'nullizzle', 'sapizzle', 'velizzle', 'crackalackin', 'maurizzle', 'rhoncizzle'];\r\n    const [items, setItems] = useState([]);\r\n    const [idx, setIdx] = useState(1);\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {items.map((e,i) => <li key={i}>{items[i]}</li>)}\r\n            </ul>\r\n            <button onClick={() => {                \r\n                var newlist = default_list.slice(0, idx);\r\n                setItems(newlist);\r\n                setIdx(idx+1);\r\n            }}>\r\n                Add element\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 12\r\n// Setup (start from the Base component)\r\n// replace the p tag with an unordered list tag.\r\n// Keep the unordered list empty\r\n// Set the text of the button element to \"Add element\"\r\n// Goal\r\n// Same as previous exercice, but this time the list is passed as a props\r\n\r\nconst Ex12 = function ({base_list}) {\r\n    const [items, setItems] = useState([]);\r\n    const [idx, setIdx] = useState(1);\r\n    return (\r\n        <div>\r\n <ul>{items.map((e,i) => <li key={i}>{items[i]}</li>)}\r\n            </ul>\r\n            <button onClick={() => {\r\n                var newlist = base_list.slice(0, idx);\r\n                setItems(   newlist);\r\n                setIdx(idx+1);\r\n            }}>\r\n                Add element\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 13\r\n// Setup (start from the Ex11 component)\r\n// Add an extra button element with the text \"Remove element\"\r\n// Goal\r\n// On \"Add element\" button click, a new item is added to the unordered list.\r\n// On \"Remove element\" button click, a new item is added to the unordered list.\r\n// Use the same list as in exercice 11\r\n\r\n\r\nconst Ex13 = function () {\r\n    const default_list = ['ipsizzle', 'nullizzle', 'sapizzle', 'velizzle', 'crackalackin', 'maurizzle', 'rhoncizzle'];\r\n    const [items, setItems] = useState([]);\r\n    const [idx, setIdx] = useState(0);\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {\r\n                items.map((e,i) => <li key={i}>{items[i]}</li>)\r\n                }\r\n            </ul>\r\n            <button onClick={() => {\r\n                let newlist = [].concat(idx)\r\n                newlist.splice(default_list.idx, 0);\r\n                setItems(items);\r\n                \r\n            }}>\r\n                Add element\r\n            </button>\r\n            <button onClick={() => {\r\n                let newlist = [].concat(idx)\r\n                newlist.slice(default_list.idx, 1);\r\n                setItems(items);\r\n            }}>\r\n                Remove element\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\n// Exercise 14\r\n// Setup\r\n// Same as Ex13\r\n// Goal\r\n// Same as previous ex, but this time the list is passed as a props\r\n\r\nconst Ex14 = function ({base_list}) {\r\n    const [items, setItems] = useState([]);\r\n    const [idx, setIdx] = useState(1);\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {\r\n                    /* render the items as an li here */\r\n                }\r\n            </ul>\r\n            <button onClick={() => {\r\n                /* update the state here */\r\n            }}>\r\n                Add element\r\n            </button>\r\n            <button onClick={() => {\r\n                /* update the state here */\r\n            }}>\r\n                Remove element\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport {Ex1, Ex2, Ex3, Ex4, Ex5, Ex6, Ex7, Ex8, Ex9, Ex10, Ex11, Ex12, Ex13, Ex14};","import React, {useState} from 'react';\r\n\r\nimport './forms.css'\r\n\r\n// Exercise: Contact Form\r\n// We are looking to capture user feedback, for this we add a contact from\r\n// Write a component in which the user can submit a question\r\n// TODO: Thank the user after completing the form\r\n\r\nconst ContactForm = () => {\r\n    // Create the state variables and functions to update them\r\n    const [comment, setComment] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [submittedText, setSubmittedText] = useState('');\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSubmittedText(`Thanks for submitting ${name}`);\r\n    };\r\n\r\n    return (\r\n        <section className=\"contact\">\r\n            { !submittedText && (\r\n                <form onSubmit={onSubmit}>\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"comment\">Your question or comment</label> <br />\r\n                        <textarea\r\n                            id=\"comment\"\r\n                            name=\"comment\"\r\n                            onChange={(event) => { setComment(event.target.value) }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"email\">Name</label> <br />\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            aria-label=\"contact-name\"\r\n                            onChange={(event) => { setName(event.target.value)}}\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\">Send it!</button>\r\n                </form>\r\n            )}\r\n            { submittedText && (\r\n                <p>{submittedText}</p>\r\n            )}\r\n        </section>\r\n    )\r\n};\r\n\r\nconst MathForm = () => {\r\n    const [numberA, setNumberA] = useState(0);\r\n    const [numberB, setNumberB] = useState(0);\r\n\r\n    const sum = parseInt(numberA) + parseInt(numberB);\r\n\r\n    return (\r\n        <section className=\"contact\">\r\n            <form>\r\n                <div className=\"field\">\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"number\"\r\n                        name=\"numberA\"\r\n                        aria-label=\"math-number-a\"\r\n                        onChange={(event) => { setNumberA(event.target.value) }} \r\n                    />\r\n                    &nbsp; + &nbsp;\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"number\"\r\n                        name=\"numberA\"\r\n                        aria-label=\"math-number-b\"\r\n                        onChange={(event) => { setNumberB(event.target.value) }} \r\n                    />\r\n                </div>\r\n            </form>\r\n\r\n            <p>\r\n                The sum of a and b is {sum}\r\n            </p>\r\n        </section>\r\n    );\r\n};\r\n\r\n// Exercise: Fruit Form\r\n// User can submit their favourite fruit in our form\r\n// The form however only supports banana's and apples\r\n// TODO: Make sure users can only submit \"banana\" or \"apple\"\r\n// TODO: if an invalid fruit (not \"banana\" or \"apple\") is typed in an error message is displayed\r\n\r\nconst FruitForm = () => {\r\n    // Create the state variables and functions to update them\r\n    const [fruits, setFruits] = useState([]);\r\n    const [fruit, setFruit] = useState('');\r\n\r\n    let error = (fruit === 'banana' || fruit === 'apple')? false: true; /* Add an expression here that validates if fruit is a banana or apple */\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        (!error && setFruits([...fruits, fruit]));\r\n    };\r\n\r\n    return (\r\n        <section className=\"contact\">\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"email\">Banana or Apple</label> <br />\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        aria-label=\"fruit-name\"\r\n                        onChange={(event) => { setFruit(event.target.value) }}\r\n                    />\r\n                </div>\r\n                {error && (\r\n                    <p className=\"error\">I don't recognize this fruit please make a choice between \"banana\" or \"apple\"</p>\r\n                )}\r\n                <button type=\"submit\">Add</button>\r\n            </form>\r\n            <ul>\r\n                {fruits.map((fruit, index) => {\r\n                    return <li key={index}><Fruit name={fruit} /></li>\r\n                })}\r\n            </ul>\r\n        </section>\r\n    )\r\n};\r\n\r\nconst Fruit = ({ name }) => {\r\n    let fruitMoji;\r\n    if (name === 'banana') {\r\n        fruitMoji = '🍌';\r\n    }\r\n    else if (name === 'apple') {\r\n        fruitMoji = '🍎'\r\n    }\r\n\r\n    return <span data-testid=\"fruit\">{fruitMoji}</span>\r\n};\r\n\r\nexport { ContactForm, MathForm, FruitForm };","import React, {useState} from 'react';\r\n\r\n// Exercise: Fruit App\r\n// User can submit their favourite fruit in our form\r\n// The form however only supports banana's and apples\r\n// TODO: finish connecting the FruitForm to our list\r\n// TODO: add support for oranges, make sure we can add oranges to our list\r\n\r\nconst FruitApp = () => {\r\n    const [fruits, setFruits] = useState([]);\r\n\r\n    const onSubmit = () => {\r\n        /* update the fruits here */\r\n    };\r\n\r\n    return (\r\n        <section className={'fruit'}>\r\n            <FruitForm onSubmitHandler={onSubmit} />\r\n            <FruitList fruits={fruits} />\r\n        </section>\r\n    )\r\n};\r\n\r\nconst FruitList = ({ fruits }) => {\r\n    return (\r\n        <ul>\r\n            {fruits.map((fruit, index) => {\r\n                return <li key={index}><Fruit name={fruit} /></li>\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\nconst Fruit = ({ name }) => {\r\n    let fruitMoji;\r\n    if (name === 'banana') {\r\n        fruitMoji = '🍌';\r\n    }\r\n    else if (name === 'apple') {\r\n        fruitMoji = '🍎'\r\n    }\r\n\r\n    return <span data-testid=\"fruit\">{fruitMoji}</span>\r\n};\r\n\r\nconst FruitForm = ({ onSubmitHandler }) => {\r\n    const [fruit, setFruit] = useState('');\r\n\r\n    const isValidFruit = (fruitInput) => {\r\n        return fruitInput === 'apple' || fruitInput === 'banana';\r\n    };\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault(); \r\n        if (isValidFruit(fruit)) {\r\n            console.log('onSubmitHandler');\r\n            console.log(onSubmitHandler);\r\n            onSubmitHandler(fruit)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section className=\"contact\">\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"field\">\r\n                    <label htmlFor=\"email\">Banana or Apple</label> <br />\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        aria-label=\"fruit-name\"\r\n                        onChange={(event) => { setFruit(event.target.value) }}\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Add</button>\r\n            </form>\r\n        </section>\r\n    )\r\n};\r\n\r\n// Exercise: Fruit App With Balance\r\n// TODO: finish connecting the FruitForm to our list\r\n// TODO: make sure FruitBalance is rendered\r\n// TODO: todo support oranges\r\n// TODO: todo support peaches\r\n\r\nconst FruitAppWithBalance = () => {\r\n    const [fruits, setFruits] = useState([]);\r\n\r\n    const onSubmitHandler = (fruit) => {\r\n    };\r\n\r\n    return (\r\n        <section className={'fruit'}>\r\n            <FruitForm onSubmitHandler={onSubmitHandler} />\r\n            <FruitList fruits={fruits} />\r\n            /* Render the component FruitBalance here with the correct prop */\r\n        </section>\r\n    )\r\n};\r\n\r\nconst FruitBalance = ({ fruits = [] }) => {\r\n    const bananas = fruits.filter(fruit => fruit === 'banana');\r\n    const apples = fruits.filter(fruit => fruit === 'apple');\r\n\r\n    let message = 'Eat more bananas';\r\n    if (bananas.length > apples.length) {\r\n        message = 'Eat more apples';\r\n    }\r\n\r\n    return (\r\n        <p>\r\n            {message}\r\n        </p>\r\n    )\r\n};\r\n\r\nexport { FruitApp, FruitAppWithBalance }","import React, {useEffect, useState} from \"react\";\r\n\r\n// Exercise Pokedex:\r\n// A pokedex is a machine that displays all the known pokemon\r\n// Render all the known pokemons for our user\r\n// TODO: after fetching the pokemons from the api set it to our state\r\n// TODO: render the names of the pokemons\r\n\r\nconst Pokedex = () => {\r\n    const [pokemons, setPokemons] = useState([]);\r\n\r\n    // This use effect might be confusing\r\n    // But is is an example of another type of hook\r\n    // For now it is unimportant to know how it works exactly\r\n    // Just know that it executes the function once on first render\r\n    useEffect(() => {\r\n        const fetchPokemons = () => {\r\n            return fetch('https://pokeapi.co/api/v2/pokedex/2/')\r\n                .then(response => response.json())\r\n                .then(json => json.pokemon_entries);\r\n        };\r\n\r\n        /* Use the result of the fetchPokemons function */\r\n        /* set the result using setPokemons, be sure to support the render below */\r\n    }, []);\r\n\r\n    return (\r\n        <div className={'pokedex'}>\r\n            <h2>Pokedex</h2>\r\n            {\r\n                pokemons.map(pokemon => <Pokemon key={pokemon.entry_number} {...pokemon} />)\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Pokemon = ({ /* add the property we want to use in order to display the name */ }) => {\r\n    return (\r\n        <article>\r\n            {/* Render the property here */}\r\n        </article>\r\n    )\r\n};\r\n\r\n// Exercise Pokedex:\r\n// A pokedex is a machine that displays all the known pokemon\r\n// Render all the known pokemons for our user\r\n// TODO: after fetching the pokemons from the api set it to our state\r\n// TODO: render the names of the pokemons\r\n\r\nconst InteractivePokedex = () => {\r\n    const [pokemons, setPokemons] = useState([]);\r\n    const [selectedPokemon, setSelectedPokemon] = useState(false);\r\n\r\n    // This use effect might be confusing\r\n    // But is is an example of another type of hook\r\n    // For now it is unimportant to know how it works exactly\r\n    // Just know that it executes the function once on first render\r\n    useEffect(() => {\r\n        const fetchPokemons = () => {\r\n            return fetch('https://pokeapi.co/api/v2/pokedex/2/')\r\n                .then(response => response.json())\r\n                .then(json => json.pokemon_entries);\r\n        };\r\n\r\n        /* Use the result of the fetchPokemons function */\r\n        /* set the result using setPokemons, be sure to support the render below */\r\n    }, []);\r\n\r\n    const onSelectHandler = (pokemon) => {\r\n        const fetchPokemon = () => {\r\n            return fetch(pokemon.url)\r\n                .then(response => response.json());\r\n        };\r\n\r\n        /* Use the result of the fetchPokemon function */\r\n        /* set the result using selectedPokemon, be sure to support the render below */\r\n    \r\n    };\r\n\r\n    return (\r\n        <div className={'pokedex'}>\r\n            <h2>Interactive Pokedex</h2>\r\n            {\r\n                selectedPokemon === false\r\n                ? (\r\n                    pokemons.map(pokemon => <InterActivePokemon key={pokemon.entry_number} {...pokemon} /* pass the onSelectHandler here a property */ />)\r\n                )\r\n                : (\r\n                    <DetailedPokemon {...selectedPokemon} />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst DetailedPokemon = ({ flavor_text_entries }) => {\r\n    return (\r\n        <article>\r\n            {flavor_text_entries.map((entry, index) => <p key={index}>{entry.flavor_text}</p>)}\r\n        </article>\r\n    );\r\n};\r\n\r\nconst InterActivePokemon = ({ pokemon_species, onSelectHandler }) => {\r\n    const onClick = () => {\r\n        /* trigger the onSelectedHandler function with the pokemon_species */\r\n    };\r\n\r\n    return (\r\n        <article>\r\n            {/* Render the property here */}\r\n            <button onClick={onClick}>Learn more</button>\r\n        </article>\r\n    )\r\n};\r\n\r\n\r\nexport { Pokedex, InteractivePokedex };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Ex1, Ex10, Ex11, Ex12, Ex13, Ex14, Ex2, Ex3, Ex4, Ex5, Ex6, Ex7, Ex8, Ex9} from './state';\r\nimport {ContactForm, FruitForm, MathForm} from \"./forms\";\r\nimport {FruitApp, FruitAppWithBalance} from \"./communication\";\r\n\r\nimport './index.css';\r\nimport {InteractivePokedex, Pokedex} from \"./api\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <section className=\"app\">\r\n\r\n            <h1>React - Week 2</h1>\r\n\r\n            <section className=\"app_goal\">\r\n                <h2>State Hooks</h2>\r\n\r\n                <h3>Exercise 1</h3>\r\n                <Ex1/>\r\n                <h3>Exercise 2</h3>\r\n                <Ex2/>\r\n                <h3>Exercise 3</h3>\r\n                <Ex3/>\r\n                <h3>Exercise 4</h3>\r\n                <Ex4/>\r\n                <h3>Exercise 5</h3>\r\n                <Ex5/>\r\n                <h3>Exercise 6</h3>\r\n                <Ex6/>\r\n                <h3>Exercise 7</h3>\r\n                <Ex7/>\r\n                <h3>Exercise 8</h3>\r\n                <Ex8/>\r\n                <h3>Exercise 9</h3>\r\n                <Ex9/>\r\n                <h3>Exercise 10</h3>\r\n                <Ex10/>\r\n                <h3>Exercise 11</h3>\r\n                <Ex11/>\r\n                <h3>Exercise 12</h3>\r\n                <Ex12/>\r\n                <h3>Exercise 13</h3>\r\n                <Ex13/>\r\n                <h3>Exercise 14</h3>\r\n                <Ex14/>\r\n            </section>\r\n\r\n            <section className=\"app_goal\">\r\n                <h2>Forms</h2>\r\n\r\n                <h3>Contact Form</h3>\r\n                <ContactForm/>\r\n\r\n                <h3>Math Form</h3>\r\n                <MathForm/>\r\n\r\n                <h3>Fruit Form</h3>\r\n                <FruitForm/>\r\n            </section>\r\n\r\n            <section className=\"app_goal\">\r\n                <h2>Child-Parent and Parent-Child Communication</h2>\r\n\r\n                <h3>Fruit App</h3>\r\n                <FruitApp/>\r\n\r\n                <h3>Fruit App With Balance Indicator</h3>\r\n                <FruitAppWithBalance/>\r\n            </section>\r\n\r\n            <section className=\"app_goal\">\r\n                <Pokedex/>\r\n\r\n                <InteractivePokedex/>\r\n            </section>\r\n        </section>\r\n    )\r\n};\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}